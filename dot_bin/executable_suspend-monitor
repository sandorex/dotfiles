#!/bin/bash
#
# (https://github.com/sandorex/dotfiles)
# suspend-monitor - suspends the monitor and turns off the mouse
#
# Copyright 2019 Aleksandar Radivojevic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# requires xinput xset
#
# kde-connect disable 'Inhibit Screensaver' in plugins on PC
# dpms s off -dpms

# mouse to disable when suspending screen
# use `xinput list` to get the name
MOUSE="pointer:USB Optical Mouse"

function error {
   echo -e "(${FUNCNAME[0]}) [error] $*"
   exit 1
}

function mouse {
   case $1 in
      off)
         xinput disable "$MOUSE"

         mouse state && error "mouse couldn't be disabled"
      ;;
      on)
         xinput enable "$MOUSE"

         mouse state || error "mouse couldn't be disabled"
      ;;
      state)
         xinput list-props "$MOUSE" | grep "Device Enabled" | grep -q "1$"
      ;;
   esac
}

function monitor {
   case $1 in
      off)
         sleep 0.2; xset dpms force off

         monitor state && error "monitor couldn't be suspended"
      ;;
      on)
         xset dpms force on

         monitor state || error "monitor didn't wake up"
      ;;
      state)
         xset q | tail -n1 | grep -Eq "Disabled|On$"
      ;;
   esac
}

function dpms {
   case $1 in
      on)
         xset +dpms
      ;;
      off)
         xset -dpms
      ;;
      state)
         ! xset q | tail -n1 | grep -Eq "Disabled"
      ;;
   esac
}

# check for xorg
if ! xhost >& /dev/null; then
   error "xorg not found"
   exit 1
fi

if ! dpms state; then
   # make sure dpms is on
   dpms on

   DPMS_STATE="1"
fi

# check if monitor is already off
if ! monitor state; then
   echo "Monitor is already off"
   exit 1
fi

# turn off the mouse
mouse off

# turn monitor off
monitor off

# watch monitor state
# turn mouse on when monitor wakes up
{
   while ! monitor state; do
      # may seem like a lot but waking is actually really long
      sleep 3s
   done

   # revert dpms state
   if [ -n "$DPMS_STATE" ]; then
      dpms off
   fi

   # turn the mouse back on
   mouse on
} &
