#!/usr/bin/env python3
#
# (https://github.com/sandorex/dotfiles)
# basic-server - ?
#
# Copyright 2019 Aleksandar Radivojevic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os, sys, argparse, datetime, subprocess

from urllib.parse import unquote_plus
from http.server import HTTPServer, BaseHTTPRequestHandler

AP = argparse.ArgumentParser()

AP.add_argument('--script', type = str, metavar = 'PATH',
               help = 'Execute script with GET request as first parameter')
AP.add_argument('--logfile', type = str, metavar = 'PATH',
               help = 'Path to logfile')

ll_group = AP.add_mutually_exclusive_group()
ll_group.add_argument('-q', '--quiet', action = 'store_true',
               help = 'Do not print to console')

AP.add_argument('-p', '--port', type = int, default = 80,
               help = 'Port for http server (default 80)')
AP.add_argument('-a', '--address', type = str, default = '',
               help = 'IP address for http server (default 0.0.0.0)')

ARGS = AP.parse_intermixed_args()

class Handler(BaseHTTPRequestHandler):
   def response(self, code):
      self.send_response(code)
      self.send_header('Content-type','text/plain')
      self.end_headers()

   def do_GET(self):
      self.response(202) # accepted

      # decode it from url encoding
      path = unquote_plus(self.path)

      if ARGS.logfile:
         with open(ARGS.logfile, 'a') as file:
            file.write(path[1:]) # removes the slash
            file.write('\n')

      # if ARGS.script:
      #    if os.name == 'nt':
      #       cmd = 'start'
      #    else:
      #       cmd = 'exec'

      #    subprocess.run([ ARGS.script, path ])

   def log_message(self, format, *args):
      if not ARGS.quiet:
         super().log_message(format, *args)

if __name__ == "__main__":
   if ARGS.script is not None:
      if os.path.exists(ARGS.script):
         if not os.path.isfile(ARGS.script):
            AP.error(f"Script path '{ARGS.script}' is not a file")
      else:
         AP.error(f"Script path '{ARGS.script}' does not exist")

   if ARGS.logfile is not None:
      if os.path.exists(ARGS.logfile):
         if not os.path.isfile(ARGS.logfile):
            AP.error(f"Logfile path '{ARGS.logfile}' exists and is not a file")

   # if '--' in sys.argv:
   #    pass

   print(ARGS)

   if ARGS.logfile is not None:
      with open(ARGS.logfile, 'a') as file:
         file.write(f'\n--- {datetime.datetime.now()} ---\n\n')

   server = HTTPServer((ARGS.address, ARGS.port), Handler)

   if not ARGS.quiet:
      print(f"Serving at {server.server_address[0]}:{server.server_address[1]}")

   try:
      server.serve_forever()
   except KeyboardInterrupt:
      print('Quitting..')
